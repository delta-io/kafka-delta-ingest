name: build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install minimum stable with clippy and rustfmt
        uses: actions-rs/toolchain@v1
        with:
          profile: default
          toolchain: stable
          override: true
      - name: Format
        run: cargo fmt -- --check

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install minimum stable with clippy and rustfmt
        uses: actions-rs/toolchain@v1
        with:
          profile: default
          toolchain: stable
          override: true
      - name: Build and lint for Azure
        run: cargo clippy --features azure
      - name: upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: service
          path: .

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install minimum stable with clippy and rustfmt
        uses: actions-rs/toolchain@v1
        with:
          profile: default
          toolchain: stable
          override: true
      - name: Teststack setup
        run: docker-compose up setup
      - name: Run azure feature tests
        run: cargo test --features azure

  publish:
    run-on: ubuntu-latest
    needs: [format, build, test]
    steps:
      - uses: actions/checkout@v2

      # Update this to download the appropriate artifact from a prior build
      # This also implies you likely need to add a build step above the test step
      - name: Download ingest Artifact
        uses: actions/download-artifact@v2
        with:
          name: service
          path: .

      - name: Establish Versioning, Tags, and Labels
        id: vtl
        uses: mapped/action-vtl@latest
        with:
          baseVersion: ${{ env.BASE_VERSION }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          dockerImage: ${{ env.GRAPH_SYNC_IMAGE_NAME }}

#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to ACR
        uses: docker/login-action@v1
        with:
          registry: mappeddev.azurecr.io
          username: ${{ secrets.AZURE_CONTAINER_WRITE_ID }}
          password: ${{ secrets.AZURE_CONTAINER_WRITE_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          file: ./Dockerfile.Debian
          build-args: |
            MAPPED_GPR_TOKEN=${{secrets.MAPPED_GPR_TOKEN}}
          push: ${{ steps.vtl.outputs.docker_push }}
          tags: ${{ steps.vtl.outputs.docker_tags }}
          labels: ${{ steps.vtl.outputs.oci_labels }}

